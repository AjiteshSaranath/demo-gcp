# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Push Python Image to Google Cloud Platform
on:
  push:
    branches:
    - '*'
jobs:
  build-push-gcr:
    name: Build and Push to GCP
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: demo-gcp
      IMAGE_NAME_ENV: demo-gcp_env
      PROJECT_ID: festive-rarity-403705
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: install  gcloud cli
        uses: google-github-actions/auth@v2
        #uses: google-github-actions/setup-gcloud@v2
        with:
          service_account: 'speechtotext@voicetotext-379213.iam.gserviceaccount.com'
          credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          #install_components: 'gke-gcloud-auth-plugin'
          #export_default_credentials: true

      - name: Build Docker Image
        run: |-
          docker build -t $IMAGE_NAME:latest .
          docker build -t $IMAGE_NAME_ENV:latest .
      - name: Configure Docker Client
        run: |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
        env:
        # GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
          GIT_TAG: v0.1.0
      - name: Push Docker Image to Artifact Registry
        run: |-
          docker image list
          docker tag $IMAGE_NAME:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
          docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
          #gcloud artifacts docker images delete us-docker.pkg.dev/$PROJECT_ID/gcr.io/$IMAGE_NAME_ENV:latest
          #gcloud artifacts docker images list us-docker.pkg.dev/$PROJECT_ID/gcr.io/$IMAGE_NAME_ENV > output.txt 
          #magic__^^___line\n#grep -q \"\" output.txt\n#if [[ $? -eq 0 ]]; then
          gcloud container images delete us-docker.pkg.dev/$PROJECT_ID/gcr.io/$IMAGE_NAME_ENV:latest
          #fi       \n#gcloud artifacts docker images delete LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE_NAME_ENV:latest\n
          docker tag $IMAGE_NAME_ENV:latest gcr.io/$PROJECT_ID/$IMAGE_NAME_ENV:latest
          docker push gcr.io/$PROJECT_ID/$IMAGE_NAME_ENV:latest
